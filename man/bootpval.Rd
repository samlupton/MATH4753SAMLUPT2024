% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootpval.R
\name{bootpval}
\alias{bootpval}
\title{Bootstrapped p-value for hypothesis testing}
\usage{
bootpval(x, conf.level = 0.95, iter = 3000, mu0 = 0, test = "two")
}
\arguments{
\item{x}{A numeric vector of data values. This is the sample for which you want to compute the test statistic and p-value.}

\item{conf.level}{A numeric value between 0 and 1 representing the confidence level for the confidence interval. Default is 0.95.}

\item{iter}{The number of bootstrap iterations to perform. Default is 3000.}

\item{mu0}{The value of the null hypothesis mean. Default is 0.}

\item{test}{A character string specifying the type of hypothesis test. Can be one of:
- "two" for a two-tailed test (default),
- "upper" for a one-tailed test with the alternative hypothesis being that the mean is greater than `mu0`,
- "lower" for a one-tailed test with the alternative hypothesis being that the mean is less than `mu0`.}
}
\value{
A list containing:
  - `pvalue`: The computed p-value based on the bootstrap resampling.
  - `tcalc`: The observed test statistic for the given data.
  - `n`: The sample size of the input data.
  - `x`: The original data vector.
  - `test`: The type of hypothesis test used.
  - `ci`: The confidence interval for the mean based on resampling.
}
\description{
This function performs a bootstrapped hypothesis test for the difference between sample means. It computes the p-value by resampling the data and calculating the test statistic for each resample. The function also computes a confidence interval for the resampled mean values and visualizes the distribution of the resampled test statistics.
}
\examples{
# Example usage:
set.seed(123)
data <- rnorm(50, mean = 5, sd = 2)
result <- bootpval(data, conf.level = 0.95, iter = 3000, mu0 = 0, test = "two")
result$pvalue
result$ci

# One-tailed test (upper):
result_upper <- bootpval(data, conf.level = 0.95, iter = 3000, mu0 = 0, test = "upper")
result_upper$pvalue

# One-tailed test (lower):
result_lower <- bootpval(data, conf.level = 0.95, iter = 3000, mu0 = 0, test = "lower")
result_lower$pvalue
}
